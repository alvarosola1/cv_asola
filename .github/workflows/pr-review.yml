name: 'Revisión de PR con IA'

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout del código'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 'Leer prompt de revisión'
        id: prompt
        run: echo "PROMPT_TEXT=$(cat .github/prompts/review-contribution.md)" >> $GITHUB_ENV

      - name: 'Obtener el diff de la PR'
        id: diff
        run: |
          git diff origin/${{ github.base_ref }} > pr.diff
          echo "DIFF_CONTENT=$(cat pr.diff)" >> $GITHUB_ENV

      - name: 'Llamar a la API de Gemini para revisión (simulado)'
        id: gemini_review
        run: |
          # En un escenario real, aquí se haría una llamada a la API de Gemini
          # usando un secret para la API Key.
          # curl -X POST -H "Content-Type: application/json" \
          # -d '{"contents":[{"parts":[{"text":"...prompt con el diff..."}]}]}' \
          # "https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${{ secrets.GEMINI_API_KEY }}"
          
          echo "Simulando revisión de IA..."
          echo "El código parece limpio. La nueva funcionalidad de filtrado mejora la UX." > review_comment.txt
      
      - name: 'Comentar en la Pull Request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const review = fs.readFileSync('review_comment.txt', 'utf8');
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `### 🤖 Revisión de IA\n\n${review}`
            });
